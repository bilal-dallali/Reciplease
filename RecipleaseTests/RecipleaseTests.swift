//
//  RecipleaseTests.swift
//  RecipleaseTests
//
//  Created by Bilal Dallali on 18/02/2025.
//

import XCTest
import Alamofire
@testable import Reciplease

final class RecipleaseTests: XCTestCase {
    
    // MARK: - Setup & Teardown
    
    override func setUp() {
        super.setUp()
        
        // Configurer le protocol mock pour intercepter les requ√™tes HTTP
        URLProtocolMock.reset()
        URLProtocolMock.startIntercepting()
    }
    
    override func tearDown() {
        // Nettoyer
        URLProtocolMock.stopIntercepting()
        URLProtocolMock.reset()
        
        super.tearDown()
    }
    
    // MARK: - Tests
    
    func testFetchRecipes_Success() {
        // Configurer le mock JSON pour la r√©ponse avec des donn√©es qui correspondent √† vos assertions
        let mockJSON = """
        {
            "hits": [
                {
                    "recipe": {
                        "label": "Salade Indochinoise",
                        "image": "https://image.url",
                        "ingredientLines": ["Laitue", "Poulet", "Croutons"],
                        "calories": 390.12750000014796,
                        "totalTime": 15,
                        "uri": "http://www.edamam.com/ontologies/edamam.owl#recipe_123",
                        "url": "https://example.com"
                    }
                },
                {
                    "recipe": {
                        "label": "Salade 2",
                        "image": "https://image2.url",
                        "ingredientLines": ["Ingr√©dient 1", "Ingr√©dient 2"],
                        "calories": 200,
                        "totalTime": 10,
                        "uri": "http://www.edamam.com/ontologies/edamam.owl#recipe_456",
                        "url": "https://example2.com"
                    }
                }
            ]
        }
        """.data(using: .utf8)!
        
        // Configurer la r√©ponse mock√©e avec des logs pour aider au d√©bogage
        URLProtocolMock.mockResponse(urlContains: "api.edamam.com/api/recipes/v2", statusCode: 200, data: mockJSON)
        
        print("üîç Test fetchRecipes - Mock configur√© avec \(mockJSON.count) octets de donn√©es JSON")
        
        // Expectation pour le test asynchrone
        let expectation = self.expectation(description: "Fetching Recipes")
        
        // Appeler directement votre fonction - √ßa utilisera le protocole mock configur√©
        fetchRecipes(ingredients: ["Salade"]) { result in
            switch result {
            case .success(let recipes):
                print("‚úÖ Test fetchRecipes - Succ√®s avec \(recipes.count) recettes")
                if let firstRecipe = recipes.first {
                    print("üìù Premi√®re recette: \(firstRecipe.label), calories: \(String(describing: firstRecipe.calories))")
                }
                
                // Assertions avec exactement les m√™mes valeurs que dans le JSON mock
                XCTAssertGreaterThanOrEqual(recipes.count, 1, "Devrait avoir au moins 1 recette")
                XCTAssertEqual(recipes.first?.label, "Salade Indochinoise")
                XCTAssertEqual(recipes.first?.calories, 390.12750000014796)
            case .failure(let error):
                print("‚ùå Test fetchRecipes - √âchec avec erreur: \(error.localizedDescription)")
                XCTFail("Erreur inattendue : \(error.localizedDescription)")
            }
            expectation.fulfill()
        }
        
        waitForExpectations(timeout: 5, handler: nil)
    }
    
    func testFetchRecipeByURI_Success() {
        // ID de recette de test
        let testRecipeID = "304399cfec7404bb253e8ea039b36544"
        
        // JSON mock pour une recette sp√©cifique - avec des donn√©es qui correspondent √† vos assertions
        let mockJSON = """
        {
            "recipe": {
                "label": "Salade Indochinoise",
                "image": "https://image.url",
                "ingredientLines": ["Ingr√©dient 1", "Ingr√©dient 2", "Ingr√©dient 3"],
                "calories": 390.12750000014796,
                "totalTime": 30,
                "uri": "http://www.edamam.com/ontologies/edamam.owl#recipe_\(testRecipeID)",
                "url": "https://example.com"
            }
        }
        """.data(using: .utf8)!
        
        // Configurer une r√©ponse mock√©e pour cette URI sp√©cifique
        URLProtocolMock.mockResponse(urlContains: "api/recipes/v2/\(testRecipeID)", statusCode: 200, data: mockJSON)
        
        print("üîç Test fetchRecipeByURI - Mock configur√© avec \(mockJSON.count) octets de donn√©es JSON")
        
        let expectation = self.expectation(description: "Fetching Recipe by URI")
        
        // Appeler directement votre fonction
        fetchRecipeByURI(uri: testRecipeID) { result in
            switch result {
            case .success(let recipe):
                print("‚úÖ Test fetchRecipeByURI - Succ√®s avec recette: \(recipe.label), calories: \(String(describing: recipe.calories))")
                
                // Assertions avec exactement les m√™mes valeurs que dans le JSON mock
                XCTAssertEqual(recipe.label, "Salade Indochinoise")
                XCTAssertEqual(recipe.calories, 390.12750000014796)
            case .failure(let error):
                print("‚ùå Test fetchRecipeByURI - √âchec avec erreur: \(error.localizedDescription)")
                XCTFail("Erreur inattendue : \(error.localizedDescription)")
            }
            expectation.fulfill()
        }
        
        waitForExpectations(timeout: 5, handler: nil)
    }
    
    func testFetchRecipeByURI_Failure() {
        // Configurer une erreur √† renvoyer
        let mockError = NSError(domain: "com.reciplease", code: -1, userInfo: [NSLocalizedDescriptionKey: "Network error"])
        URLProtocolMock.mockError(urlContains: "api/recipes/v2/unknown", error: mockError)

        print("üîç Test fetchRecipeByURI_Failure - Mock erreur configur√©")

        let expectation = self.expectation(description: "Fetching Recipe by URI Failure")

        // Appeler directement votre fonction
        fetchRecipeByURI(uri: "unknown") { result in
            switch result {
            case .success:
                print("‚ùå Test fetchRecipeByURI_Failure - Succ√®s inattendu !")
                XCTFail("L'appel API ne devrait pas r√©ussir")
            case .failure(let error):
                print("‚úÖ Test fetchRecipeByURI_Failure - √âchec attendu avec erreur: \(error.localizedDescription)")
                // V√©rifier que l'erreur correspond √† celle que nous avons configur√©e
                let nsError = error as NSError
                XCTAssertEqual(nsError.domain, "com.reciplease")
                XCTAssertEqual(nsError.code, -1)
                XCTAssertEqual(nsError.localizedDescription, "Network error")
            }
            expectation.fulfill()
        }

        waitForExpectations(timeout: 5, handler: nil)
    }
}

// MARK: - URLProtocolMock avec contr√¥le plus pr√©cis

class URLProtocolMock: URLProtocol {
    // Stockage pour les r√©ponses et erreurs mock√©es
    static var mockResponses = [String: (statusCode: Int, data: Data)]()
    static var mockErrors = [String: Error]()
    
    // Pour activer/d√©sactiver l'interception
    static func startIntercepting() {
        URLProtocol.registerClass(URLProtocolMock.self)
        URLSessionConfiguration.default.protocolClasses = [URLProtocolMock.self] + (URLSessionConfiguration.default.protocolClasses ?? [])
        URLSessionConfiguration.af.default.protocolClasses = [URLProtocolMock.self] + (URLSessionConfiguration.af.default.protocolClasses ?? [])
        print("üîÑ URLProtocolMock: Interception activ√©e")
    }
    
    static func stopIntercepting() {
        URLProtocol.unregisterClass(URLProtocolMock.self)
        print("üîÑ URLProtocolMock: Interception d√©sactiv√©e")
    }
    
    // R√©initialiser tous les mocks
    static func reset() {
        mockResponses.removeAll()
        mockErrors.removeAll()
        print("üßπ URLProtocolMock: Mocks r√©initialis√©s")
    }
    
    // Ajouter une r√©ponse mock√©e pour une URL (correspondance partielle)
    static func mockResponse(urlContains: String, statusCode: Int = 200, data: Data) {
        mockResponses[urlContains] = (statusCode, data)
        print("‚ûï URLProtocolMock: Ajout d'une r√©ponse mock pour URLs contenant '\(urlContains)'")
    }
    
    // Ajouter une erreur mock√©e pour une URL (correspondance partielle)
    static func mockError(urlContains: String, error: Error) {
        mockErrors[urlContains] = error
        print("‚ûï URLProtocolMock: Ajout d'une erreur mock pour URLs contenant '\(urlContains)'")
    }
    
    // MARK: - Impl√©mentation requise de URLProtocol
    
    override class func canInit(with request: URLRequest) -> Bool {
        return true
    }
    
    override class func canonicalRequest(for request: URLRequest) -> URLRequest {
        return request
    }
    
    override func startLoading() {
        // V√©rifier que la requ√™te a une URL
        guard let url = request.url?.absoluteString else {
            fatalError("URLRequest URL is nil")
        }
        
        print("üîç URLProtocolMock: Interception de la requ√™te pour \(url)")
        
        // Chercher une erreur mock√©e qui correspond √† l'URL
        for (urlSubstring, error) in URLProtocolMock.mockErrors where url.contains(urlSubstring) {
            print("‚úÖ URLProtocolMock: Erreur mock trouv√©e pour \(urlSubstring)")
            client?.urlProtocol(self, didFailWithError: error)
            client?.urlProtocolDidFinishLoading(self)
            return
        }
        
        // Chercher une r√©ponse mock√©e qui correspond √† l'URL
        for (urlSubstring, responseTuple) in URLProtocolMock.mockResponses where url.contains(urlSubstring) {
            print("‚úÖ URLProtocolMock: R√©ponse mock trouv√©e pour \(urlSubstring)")
            
            // Cr√©er une r√©ponse HTTP
            let response = HTTPURLResponse(
                url: request.url!,
                statusCode: responseTuple.statusCode,
                httpVersion: "HTTP/1.1",
                headerFields: ["Content-Type": "application/json"]
            )!
            
            // Envoyer la r√©ponse mock√©e
            client?.urlProtocol(self, didReceive: response, cacheStoragePolicy: .notAllowed)
            client?.urlProtocol(self, didLoad: responseTuple.data)
            client?.urlProtocolDidFinishLoading(self)
            return
        }
        
        print("‚ö†Ô∏è URLProtocolMock: Aucun mock trouv√© pour \(url)")
        
        // Si aucune mock ne correspond, retourner une erreur 404
        let response = HTTPURLResponse(
            url: request.url!,
            statusCode: 404,
            httpVersion: "HTTP/1.1",
            headerFields: ["Content-Type": "application/json"]
        )!
        
        let errorData = Data("{\"error\":\"No mock found for URL\"}".utf8)
        client?.urlProtocol(self, didReceive: response, cacheStoragePolicy: .notAllowed)
        client?.urlProtocol(self, didLoad: errorData)
        client?.urlProtocolDidFinishLoading(self)
    }
    
    override func stopLoading() {}
}
